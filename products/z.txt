const OrderRoute = require("express").Router();
const verify = require("../middleware/verify");
const authAdmin = require("../middleware/authAdmin");
const Cart = require("../models/CartModel");
const Product = require("../models/ProductModel");
const asyncHandler = require("express-async-handler");

OrderRoute.post(
  "/cart/create_order",
  verify,
  asyncHandler(async (req, res) => {
    Cart.findOne({ user: req.user.id }).exec((error, cart) => {
      if (error) return res.json({ msg: error });

      if (cart) {
        const product = req.body.cartItems.product;

        const item = cart.cartItems.find((c) => c.product == product);

        if (item) {
          Cart.findOneAndUpdate(
            { user: req.user.id, "cartItems.product": product },
            {
              $set: {
                cartItems: {
                  ...req.body.cartItems,
                  quantity: item.quantity + req.body.cartItems.quantity,
                },
              },
            }
          ).exec((error, _cart) => {
            if (error) return res.json({ msg: error });

            if (_cart) {
              return res.json({ msg: _cart });
            }
          });
        } else {
          Cart.findOneAndUpdate(
            { user: req.user.id },
            {
              $push: {
                cartItems: req.body.cartItems,
              },
            }
          ).exec((error, _cart) => {
            if (error) return res.json({ msg: error });

            if (_cart) {
              return res.json({ msg: _cart });
            }
          });
        }
      } else {
        const cart = new Cart({
          user: req.user.id,
          cartItems: [req.body.cartItems],
        });

        cart.save((error, cart) => {
          if (error) return res.json({ msg: error });

          if (cart) {
            return res.json({ cart });
          }
        });
      }
    });
  })
);

OrderRoute.get(
  "/cart/show_carts",
  verify,
  authAdmin,
  asyncHandler(async (req, res) => {
    const result = await Cart.find();

    res.json({ result });
  })
);

OrderRoute.get(
  "/cart/show_user_carts",
  verify,
  asyncHandler(async (req, res) => {

await Cart.find({user: req.user.id}).then(carts => res.json({carts}))




  })
);

module.exports = OrderRoute;
